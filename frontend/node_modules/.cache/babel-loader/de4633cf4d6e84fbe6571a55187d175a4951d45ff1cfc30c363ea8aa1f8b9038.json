{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{Line}from\"react-chartjs-2\";import{Chart as ChartJS,CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend}from'chart.js';// Registering Chart.js components\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend);const Dashboard=()=>{const[campaignData,setCampaignData]=useState([]);const[filter,setFilter]=useState('');useEffect(()=>{// Fetch campaign data from the backend API\nfetch('http://localhost:5000/api/metrics').then(response=>response.json()).then(data=>setCampaignData(data)).catch(error=>console.error('Error fetching data:',error));},[]);// Handle filter change\nconst handleFilterChange=event=>{setFilter(event.target.value);// Update filter state\n};// Filtered data based on campaign name (case-insensitive)\nconst filteredData=campaignData.filter(campaign=>campaign.campaign_name.toLowerCase().includes(filter.toLowerCase()));// Chart Data\nconst chartData={labels:filteredData.map(campaign=>campaign.campaign_name),// X-axis: Campaign names\ndatasets:[{label:'Spend',data:filteredData.map(campaign=>campaign.spend),borderColor:'blue',backgroundColor:'rgba(0, 0, 255, 0.2)',fill:true},{label:'Conversions',data:filteredData.map(campaign=>campaign.conversions),borderColor:'green',backgroundColor:'rgba(0, 255, 0, 0.2)',fill:true}]};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Campaign Dashboard\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:filter,onChange:handleFilterChange,placeholder:\"Filter by campaign name\",style:{marginBottom:'20px',padding:'8px',fontSize:'14px'}}),/*#__PURE__*/_jsx(\"h3\",{children:\"Campaign Metrics\"}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Date\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Campaign ID\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Campaign Name\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Clicks\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Impressions\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Spend\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Conversions\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:filteredData.map(campaign=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:campaign.date}),/*#__PURE__*/_jsx(\"td\",{children:campaign.campaign_id}),/*#__PURE__*/_jsx(\"td\",{children:campaign.campaign_name}),/*#__PURE__*/_jsx(\"td\",{children:campaign.clicks}),/*#__PURE__*/_jsx(\"td\",{children:campaign.impressions}),/*#__PURE__*/_jsx(\"td\",{children:campaign.spend}),/*#__PURE__*/_jsx(\"td\",{children:campaign.conversions})]},campaign.campaign_id))})]}),/*#__PURE__*/_jsx(\"h3\",{children:\"Spend vs Conversions\"}),/*#__PURE__*/_jsx(Line,{data:chartData,options:{responsive:true}})]});};export default Dashboard;","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsx","_jsx","jsxs","_jsxs","register","Dashboard","campaignData","setCampaignData","filter","setFilter","fetch","then","response","json","data","catch","error","console","handleFilterChange","event","target","value","filteredData","campaign","campaign_name","toLowerCase","includes","chartData","labels","map","datasets","label","spend","borderColor","backgroundColor","fill","conversions","children","type","onChange","placeholder","style","marginBottom","padding","fontSize","date","campaign_id","clicks","impressions","options","responsive"],"sources":["/home/kitanshi/ad-tracking-dashboard/frontend/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Registering Chart.js components\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\nconst Dashboard = () => {\n  const [campaignData, setCampaignData] = useState([]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    // Fetch campaign data from the backend API\n    fetch('http://localhost:5000/api/metrics')\n      .then(response => response.json())\n      .then(data => setCampaignData(data))\n      .catch(error => console.error('Error fetching data:', error));\n  }, []);\n\n  // Handle filter change\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value); // Update filter state\n  };\n\n  // Filtered data based on campaign name (case-insensitive)\n  const filteredData = campaignData.filter(campaign =>\n    campaign.campaign_name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  // Chart Data\n  const chartData = {\n    labels: filteredData.map(campaign => campaign.campaign_name), // X-axis: Campaign names\n    datasets: [\n      {\n        label: 'Spend',\n        data: filteredData.map(campaign => campaign.spend),\n        borderColor: 'blue',\n        backgroundColor: 'rgba(0, 0, 255, 0.2)',\n        fill: true,\n      },\n      {\n        label: 'Conversions',\n        data: filteredData.map(campaign => campaign.conversions),\n        borderColor: 'green',\n        backgroundColor: 'rgba(0, 255, 0, 0.2)',\n        fill: true,\n      }\n    ]\n  };\n\n  return (\n    <div>\n      <h2>Campaign Dashboard</h2>\n\n      {/* Filter Input */}\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={handleFilterChange}\n        placeholder=\"Filter by campaign name\"\n        style={{ marginBottom: '20px', padding: '8px', fontSize: '14px' }}\n      />\n\n      {/* Data Table */}\n      <h3>Campaign Metrics</h3>\n      <table>\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Campaign ID</th>\n            <th>Campaign Name</th>\n            <th>Clicks</th>\n            <th>Impressions</th>\n            <th>Spend</th>\n            <th>Conversions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {filteredData.map((campaign) => (\n            <tr key={campaign.campaign_id}>\n              <td>{campaign.date}</td>\n              <td>{campaign.campaign_id}</td>\n              <td>{campaign.campaign_name}</td>\n              <td>{campaign.clicks}</td>\n              <td>{campaign.impressions}</td>\n              <td>{campaign.spend}</td>\n              <td>{campaign.conversions}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {/* Line Chart */}\n      <h3>Spend vs Conversions</h3>\n      <Line data={chartData} options={{ responsive: true }} />\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,IAAI,KAAQ,iBAAiB,CACtC,OAASC,KAAK,GAAI,CAAAC,OAAO,CAAEC,aAAa,CAAEC,WAAW,CAAEC,YAAY,CAAEC,WAAW,CAAEC,KAAK,CAAEC,OAAO,CAAEC,MAAM,KAAQ,UAAU,CAE1H;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACAX,OAAO,CAACY,QAAQ,CAACX,aAAa,CAAEC,WAAW,CAAEC,YAAY,CAAEC,WAAW,CAAEC,KAAK,CAAEC,OAAO,CAAEC,MAAM,CAAC,CAE/F,KAAM,CAAAM,SAAS,CAAGA,CAAA,GAAM,CACtB,KAAM,CAACC,YAAY,CAAEC,eAAe,CAAC,CAAGnB,QAAQ,CAAC,EAAE,CAAC,CACpD,KAAM,CAACoB,MAAM,CAAEC,SAAS,CAAC,CAAGrB,QAAQ,CAAC,EAAE,CAAC,CAExCC,SAAS,CAAC,IAAM,CACd;AACAqB,KAAK,CAAC,mCAAmC,CAAC,CACvCC,IAAI,CAACC,QAAQ,EAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,EAAIP,eAAe,CAACO,IAAI,CAAC,CAAC,CACnCC,KAAK,CAACC,KAAK,EAAIC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAAC,CACjE,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAE,kBAAkB,CAAIC,KAAK,EAAK,CACpCV,SAAS,CAACU,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAE;AACjC,CAAC,CAED;AACA,KAAM,CAAAC,YAAY,CAAGhB,YAAY,CAACE,MAAM,CAACe,QAAQ,EAC/CA,QAAQ,CAACC,aAAa,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAClB,MAAM,CAACiB,WAAW,CAAC,CAAC,CACpE,CAAC,CAED;AACA,KAAM,CAAAE,SAAS,CAAG,CAChBC,MAAM,CAAEN,YAAY,CAACO,GAAG,CAACN,QAAQ,EAAIA,QAAQ,CAACC,aAAa,CAAC,CAAE;AAC9DM,QAAQ,CAAE,CACR,CACEC,KAAK,CAAE,OAAO,CACdjB,IAAI,CAAEQ,YAAY,CAACO,GAAG,CAACN,QAAQ,EAAIA,QAAQ,CAACS,KAAK,CAAC,CAClDC,WAAW,CAAE,MAAM,CACnBC,eAAe,CAAE,sBAAsB,CACvCC,IAAI,CAAE,IACR,CAAC,CACD,CACEJ,KAAK,CAAE,aAAa,CACpBjB,IAAI,CAAEQ,YAAY,CAACO,GAAG,CAACN,QAAQ,EAAIA,QAAQ,CAACa,WAAW,CAAC,CACxDH,WAAW,CAAE,OAAO,CACpBC,eAAe,CAAE,sBAAsB,CACvCC,IAAI,CAAE,IACR,CAAC,CAEL,CAAC,CAED,mBACEhC,KAAA,QAAAkC,QAAA,eACEpC,IAAA,OAAAoC,QAAA,CAAI,oBAAkB,CAAI,CAAC,cAG3BpC,IAAA,UACEqC,IAAI,CAAC,MAAM,CACXjB,KAAK,CAAEb,MAAO,CACd+B,QAAQ,CAAErB,kBAAmB,CAC7BsB,WAAW,CAAC,yBAAyB,CACrCC,KAAK,CAAE,CAAEC,YAAY,CAAE,MAAM,CAAEC,OAAO,CAAE,KAAK,CAAEC,QAAQ,CAAE,MAAO,CAAE,CACnE,CAAC,cAGF3C,IAAA,OAAAoC,QAAA,CAAI,kBAAgB,CAAI,CAAC,cACzBlC,KAAA,UAAAkC,QAAA,eACEpC,IAAA,UAAAoC,QAAA,cACElC,KAAA,OAAAkC,QAAA,eACEpC,IAAA,OAAAoC,QAAA,CAAI,MAAI,CAAI,CAAC,cACbpC,IAAA,OAAAoC,QAAA,CAAI,aAAW,CAAI,CAAC,cACpBpC,IAAA,OAAAoC,QAAA,CAAI,eAAa,CAAI,CAAC,cACtBpC,IAAA,OAAAoC,QAAA,CAAI,QAAM,CAAI,CAAC,cACfpC,IAAA,OAAAoC,QAAA,CAAI,aAAW,CAAI,CAAC,cACpBpC,IAAA,OAAAoC,QAAA,CAAI,OAAK,CAAI,CAAC,cACdpC,IAAA,OAAAoC,QAAA,CAAI,aAAW,CAAI,CAAC,EAClB,CAAC,CACA,CAAC,cACRpC,IAAA,UAAAoC,QAAA,CACGf,YAAY,CAACO,GAAG,CAAEN,QAAQ,eACzBpB,KAAA,OAAAkC,QAAA,eACEpC,IAAA,OAAAoC,QAAA,CAAKd,QAAQ,CAACsB,IAAI,CAAK,CAAC,cACxB5C,IAAA,OAAAoC,QAAA,CAAKd,QAAQ,CAACuB,WAAW,CAAK,CAAC,cAC/B7C,IAAA,OAAAoC,QAAA,CAAKd,QAAQ,CAACC,aAAa,CAAK,CAAC,cACjCvB,IAAA,OAAAoC,QAAA,CAAKd,QAAQ,CAACwB,MAAM,CAAK,CAAC,cAC1B9C,IAAA,OAAAoC,QAAA,CAAKd,QAAQ,CAACyB,WAAW,CAAK,CAAC,cAC/B/C,IAAA,OAAAoC,QAAA,CAAKd,QAAQ,CAACS,KAAK,CAAK,CAAC,cACzB/B,IAAA,OAAAoC,QAAA,CAAKd,QAAQ,CAACa,WAAW,CAAK,CAAC,GAPxBb,QAAQ,CAACuB,WAQd,CACL,CAAC,CACG,CAAC,EACH,CAAC,cAGR7C,IAAA,OAAAoC,QAAA,CAAI,sBAAoB,CAAI,CAAC,cAC7BpC,IAAA,CAACX,IAAI,EAACwB,IAAI,CAAEa,SAAU,CAACsB,OAAO,CAAE,CAAEC,UAAU,CAAE,IAAK,CAAE,CAAE,CAAC,EACrD,CAAC,CAEV,CAAC,CAED,cAAe,CAAA7C,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}