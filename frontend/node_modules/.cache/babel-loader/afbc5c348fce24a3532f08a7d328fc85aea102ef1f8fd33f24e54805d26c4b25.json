{"ast":null,"code":"const express = require('express');\nconst app = express();\nconst port = 5000;\n\n// In-memory storage for campaigns (simulating a database)\nlet campaigns = [];\napp.use(express.json()); // Middleware to parse JSON bodies\n\n// GET /api/metrics - Fetch all campaign metrics\napp.get('/api/metrics', (req, res) => {\n  res.json(campaigns);\n});\n\n// POST /api/metrics - Store a new campaign entry\napp.post('/api/metrics', (req, res) => {\n  const {\n    date,\n    campaign_id,\n    campaign_name,\n    clicks,\n    impressions,\n    spend,\n    conversions\n  } = req.body;\n\n  // Check if all required fields are provided\n  if (!date || !campaign_id || !campaign_name || !clicks || !impressions || !spend || !conversions) {\n    return res.status(400).json({\n      error: 'All fields are required.'\n    });\n  }\n\n  // Create a new campaign object and add it to the in-memory array\n  const newCampaign = {\n    date,\n    campaign_id,\n    campaign_name,\n    clicks,\n    impressions,\n    spend,\n    conversions\n  };\n  campaigns.push(newCampaign);\n\n  // Return the newly added campaign with a 201 status\n  res.status(201).json(newCampaign);\n});\n\n// GET /api/metrics?campaign_id=12345 - Fetch filtered campaign data by campaign_id\napp.get('/api/metrics', (req, res) => {\n  const {\n    campaign_id\n  } = req.query;\n  if (campaign_id) {\n    const filteredCampaigns = campaigns.filter(campaign => campaign.campaign_id === campaign_id);\n    return res.json(filteredCampaigns);\n  }\n  res.json(campaigns); // If no query parameter, return all campaigns\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});","map":{"version":3,"names":["express","require","app","port","campaigns","use","json","get","req","res","post","date","campaign_id","campaign_name","clicks","impressions","spend","conversions","body","status","error","newCampaign","push","query","filteredCampaigns","filter","campaign","listen","console","log"],"sources":["/home/kitanshi/ad-tracking-dashboard/frontend/src/components/Dashboard.js"],"sourcesContent":["const express = require('express');\nconst app = express();\nconst port = 5000;\n\n// In-memory storage for campaigns (simulating a database)\nlet campaigns = [];\n\napp.use(express.json()); // Middleware to parse JSON bodies\n\n// GET /api/metrics - Fetch all campaign metrics\napp.get('/api/metrics', (req, res) => {\n  res.json(campaigns);\n});\n\n// POST /api/metrics - Store a new campaign entry\napp.post('/api/metrics', (req, res) => {\n  const { date, campaign_id, campaign_name, clicks, impressions, spend, conversions } = req.body;\n\n  // Check if all required fields are provided\n  if (!date || !campaign_id || !campaign_name || !clicks || !impressions || !spend || !conversions) {\n    return res.status(400).json({ error: 'All fields are required.' });\n  }\n\n  // Create a new campaign object and add it to the in-memory array\n  const newCampaign = { date, campaign_id, campaign_name, clicks, impressions, spend, conversions };\n  campaigns.push(newCampaign);\n\n  // Return the newly added campaign with a 201 status\n  res.status(201).json(newCampaign);\n});\n\n// GET /api/metrics?campaign_id=12345 - Fetch filtered campaign data by campaign_id\napp.get('/api/metrics', (req, res) => {\n  const { campaign_id } = req.query;\n  if (campaign_id) {\n    const filteredCampaigns = campaigns.filter(campaign => campaign.campaign_id === campaign_id);\n    return res.json(filteredCampaigns);\n  }\n  res.json(campaigns); // If no query parameter, return all campaigns\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,GAAG,GAAGF,OAAO,CAAC,CAAC;AACrB,MAAMG,IAAI,GAAG,IAAI;;AAEjB;AACA,IAAIC,SAAS,GAAG,EAAE;AAElBF,GAAG,CAACG,GAAG,CAACL,OAAO,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEzB;AACAJ,GAAG,CAACK,GAAG,CAAC,cAAc,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACpCA,GAAG,CAACH,IAAI,CAACF,SAAS,CAAC;AACrB,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACQ,IAAI,CAAC,cAAc,EAAE,CAACF,GAAG,EAAEC,GAAG,KAAK;EACrC,MAAM;IAAEE,IAAI;IAAEC,WAAW;IAAEC,aAAa;IAAEC,MAAM;IAAEC,WAAW;IAAEC,KAAK;IAAEC;EAAY,CAAC,GAAGT,GAAG,CAACU,IAAI;;EAE9F;EACA,IAAI,CAACP,IAAI,IAAI,CAACC,WAAW,IAAI,CAACC,aAAa,IAAI,CAACC,MAAM,IAAI,CAACC,WAAW,IAAI,CAACC,KAAK,IAAI,CAACC,WAAW,EAAE;IAChG,OAAOR,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACb,IAAI,CAAC;MAAEc,KAAK,EAAE;IAA2B,CAAC,CAAC;EACpE;;EAEA;EACA,MAAMC,WAAW,GAAG;IAAEV,IAAI;IAAEC,WAAW;IAAEC,aAAa;IAAEC,MAAM;IAAEC,WAAW;IAAEC,KAAK;IAAEC;EAAY,CAAC;EACjGb,SAAS,CAACkB,IAAI,CAACD,WAAW,CAAC;;EAE3B;EACAZ,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACb,IAAI,CAACe,WAAW,CAAC;AACnC,CAAC,CAAC;;AAEF;AACAnB,GAAG,CAACK,GAAG,CAAC,cAAc,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACpC,MAAM;IAAEG;EAAY,CAAC,GAAGJ,GAAG,CAACe,KAAK;EACjC,IAAIX,WAAW,EAAE;IACf,MAAMY,iBAAiB,GAAGpB,SAAS,CAACqB,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACd,WAAW,KAAKA,WAAW,CAAC;IAC5F,OAAOH,GAAG,CAACH,IAAI,CAACkB,iBAAiB,CAAC;EACpC;EACAf,GAAG,CAACH,IAAI,CAACF,SAAS,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACyB,MAAM,CAACxB,IAAI,EAAE,MAAM;EACrByB,OAAO,CAACC,GAAG,CAAC,0BAA0B1B,IAAI,EAAE,CAAC;AAC/C,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}